Aligned with the [[High-level-roadmap|roadmap]], we have identified a list of considerations and development tasks that we need to get started with. We hope to get to a point where we have clear visibility and accountability for contributions from each team/site, assuming responsibility for sub-tasks of Crosswalk.

== Framework for embedding Chromium / CEF Replacement ==
* Needs to be better than CEF, see [[Issues-with-CEF3|Issues with CEF3]]
* With Multiplatform in mind, see [[Platform-Support|Platform Support]]
* Based on Chromium's Content API
* Keep Chromium's multiprocess and sandboxing architecture intact

=== Tasks ===
* Learn about Content API (Mikhail, Alexander Sh., Thiago, Dominik, Sudarsana, Caio, Leandro), see [[Issues-with-Content-API|Issues with Content API]]
* Investigate ways to do API extensions (Thiago, Hongbo, Halton), see [[Web-API-Extension-Comparison|Web API extension investigation]]
* Investigate [http://www.chromium.org/developers/design-documents/browser-components  Chromium Browser Components] (Thiago, Dominik)
* Identify what's wrong with CEF, refine [[Issues-with-CEF3|Issues with CEF]] (Hongbo, Caio, Leandro)
* Investigate how [[Android-WebView|Android WebView]] builds on top of Content API(Yongsheng)
* Collect ideas & design an initial API for an embedded Chromium based on Chromium's Content API
* Investigate building Chromium as a library, or in general build an external project against Chromium in a hassle-free way (Raphael?)

== Launcher / Stub-Runner ==
* Depends on Chromium Embedder
* Runs a WebApp based on the above embedding framework
* Should eventually comply with SysApps WG WebApps specification
* Multiplatform in mind, first: Linux & Win (later involve Adobe for Mac)
* Uses suitable OS-specific installation approaches (Correct packaging and dependency modeling for Linux, Windows-Installer/MSI like behavior for Windows)

=== Tasks ===
* Prototype simple launcher (not exposing any APIs, bringing up webview with no UI-decorations based on
*# Chromium's raw Content API and/or: [[Crosswalk-Prototype-Based-on-Content-API|The prototype]]
*# CEF3 [[Crosswalk-Prototype-Based-on-CEF3|CEF3 prototype]]
* Run a simple test page in it, not depending on any APIs, e.g. something from https://01.org/html5webapps/.

== Continuous Integration & Testing ==
Using the prototype launcher as a starting point, set up buildbot & testing infrastructure that builds and runs unit tests on the stub launcher.

=== Tasks ===
* Setup Crosswalk testing framework, like browser_tests and unit_tests in chrome (Hongbo), see [[Crosswalk-Testing-Framework|Crosswalk Testing Framework]]
* Take build recipes (gyp, makefiles, whatever) from prototype launcher and feed them to a buildbot-like continuous integration tool
* Display a dashboard with information on testing status

== Enable FileSystem sufficient for Adobe Brackets ==
An initial user story for Crosswalk would be to run Adobe Brackets. (Caio) [[Brackets|Brackets]]

=== Tasks ===
* Find out what kind of FS access Brackets needs
* Find out other requirements for Brackets and how to realize them with our embedding framework
* Implement modifications to our Embedder/Chromium to enable such access

== Wayland platform on Chromium ==

* Please refer to [[Wayland-Port|Wayland Port]]
* [[Wayland-Port#tasks|Tasks]] should be coordinated with Tiago Vignatti.

== Demonstrate Intel's interest in Contributing to Chromium/Blink ==
One of our objectives is to demonstrate interest in contributing, and getting involved with Chromium and Blink.

=== Tasks ===
* Identify contribution areas, examples:
** Removing #ifdef's effort
** Viewport
** ...
* Contact, get to know Chromium stakeholders & OWNERs
* Submit patches to demonstrate contribution interest